function doPost(e) { 
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheetPrincipal = ss.getSheetByName("Página1");

  const dados = JSON.parse(e.postData.contents);
  const dataEnvio = new Date();

  dados.agendamentos.forEach(agendamento => {
    // Insere na planilha principal
    sheetPrincipal.appendRow([
      dados.nome,
      "'" + dados.ra.padStart(7, '0'), // Garante que o RA tenha 7 dígitos, preenchendo com zeros à esquerda
      dados.curso,
      Utilities.formatDate(dataEnvio, "GMT-3", "dd/MM/yyyy, HH:mm:ss"),
      agendamento.disciplina,
      agendamento.horario
    ]);

    // Cria aba com nome do horário, se necessário
    const nomeAba = agendamento.horario;
    let abaHorario = ss.getSheetByName(nomeAba);

    if (!abaHorario) {
      abaHorario = ss.insertSheet(nomeAba);
      abaHorario.getRange("B1:E1").setValues([["NOME COMPLETO", "RA", "CURSO", "DISCIPLINA"]]);
    }

    const ultimaLinha = abaHorario.getLastRow();
    const proximaLinha = ultimaLinha < 1 ? 2 : ultimaLinha + 1;

    abaHorario.getRange(proximaLinha, 2, 1, 4).setValues([[ 
      dados.nome,
      "'" + dados.ra.padStart(7, '0'), // Garante que o RA tenha 7 dígitos, preenchendo com zeros à esquerda
      dados.curso,
      agendamento.disciplina
    ]]);
  });

  reordenarAbas(); // Reorganiza as abas após cada envio

  return ContentService.createTextOutput("OK");
}


// Reorganiza todas as abas após a aba principal
function reordenarAbas() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const todasAbas = ss.getSheets();

  const abaPrincipal = ss.getSheetByName("Página1");
  const abasOrdenadas = todasAbas
    .filter(s => s.getName() !== "Página1")
    .map(sheet => ({
      nome: sheet.getName(),
      chave: gerarChaveOrdenacao(sheet.getName()),
      sheet
    }))
    .sort((a, b) => compararChaves(a.chave, b.chave))
    .map(obj => obj.sheet);

  // Mover Página1 para a primeira posição
  ss.setActiveSheet(abaPrincipal);
  ss.moveActiveSheet(0);

  // Reordenar as demais abas
  abasOrdenadas.forEach((sheet, i) => {
    ss.setActiveSheet(sheet);
    ss.moveActiveSheet(i + 1); // após Página1
  });
}

// Constrói chave com data e peso do período
function gerarChaveOrdenacao(nomeAba) {
  try {
    const partes = nomeAba.split(" ");
    const [dia, mes] = partes[0].split("/").map(Number);
    const periodoTexto = partes[partes.length - 1].toLowerCase();
    const ano = new Date().getFullYear();

    const data = new Date(ano, mes - 1, dia);
    const pesoPeriodo = {
      "manhã": 1,
      "tarde": 2,
      "noite": 3
    }[periodoTexto] || 99;

    return { data, periodo: pesoPeriodo };
  } catch (err) {
    return { data: new Date(9999, 11, 31), periodo: 99 }; // fallback
  }
}

// Compara duas chaves de ordenação
function compararChaves(a, b) {
  if (a.data < b.data) return -1;
  if (a.data > b.data) return 1;
  return a.periodo - b.periodo;
}

function doGet(e) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName("Página1");

  const raParam = (e.parameter.ra || "").toString().trim().toLowerCase();

  if (!raParam) {
    return ContentService.createTextOutput(JSON.stringify({ erro: "RA não informado." }))
      .setMimeType(ContentService.MimeType.JSON);
  }

  const dados = sheet.getDataRange().getValues();
  const disciplinas = [];

  let nome = "", curso = "", dataEnvio = "", raEncontrado = false;

  for (let i = 1; i < dados.length; i++) {
    const raLinha = (dados[i][1] || "").toString().replace(/^'/, "").trim().toLowerCase();

    if (raLinha === raParam) {
      raEncontrado = true;
      nome = dados[i][0];
      curso = dados[i][2];

      // Formatando a data como "dd/MM/yyyy, HH:mm:ss"
      const dataBruta = dados[i][3];
      if (dataBruta instanceof Date) {
        const fuso = SpreadsheetApp.getActive().getSpreadsheetTimeZone();
        const dataFormatada = Utilities.formatDate(dataBruta, fuso, "dd/MM/yyyy, HH:mm:ss");
        dataEnvio = dataFormatada;
      } else {
        dataEnvio = dados[i][3]; // fallback caso não seja Date
      }

      disciplinas.push({
        nome: dados[i][4], // nome da disciplina
        horario: dados[i][5]
      });
    }
  }

  if (!raEncontrado) {
    return ContentService.createTextOutput(JSON.stringify({ erro: "Agendamento não encontrado." }))
      .setMimeType(ContentService.MimeType.JSON);
  }

  const resultado = {
    nome,
    ra: e.parameter.ra.trim(),
    curso,
    dataEnvio,
    disciplinas
  };

  return ContentService.createTextOutput(JSON.stringify(resultado))
    .setMimeType(ContentService.MimeType.JSON);
}
